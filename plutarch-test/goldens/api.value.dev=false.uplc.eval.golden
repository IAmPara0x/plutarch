singleton (program 1.0.0 [(#41c0, #a149736f6d65746f6b656e01)])
singletonData (program 1.0.0 [(#41c0, #a149736f6d65746f6b656e01)])
valueOf.itself (program 1.0.0 (\i0 -> \i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> \i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> force (force (force chooseList) i1 (delay i5) (delay (force (force ifThenElse (equalsData (force (force fstPair) (force headList i1)) i6) (delay (i4 (force (force sndPair) (force headList i1)))) (delay (i2 (force tailList i1)))))))) i1) (bData i1)) i2 0 (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> \i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> force (force (force chooseList) i1 (delay i5) (delay (force (force ifThenElse (equalsData (force (force fstPair) (force headList i1)) i6) (delay (i4 (force (force sndPair) (force headList i1)))) (delay (i2 (force tailList i1)))))))) i1) (bData i1)) i2 0 unIData (unMapData i1)) i3))
valueOf.applied (program 1.0.0 1)
valueOf.growing.1 (program 1.0.0 0)
valueOf.growing.2 (program 1.0.0 0)
valueOf.growing.3 (program 1.0.0 0)
valueOf.growing.4 (program 1.0.0 0)
valueOf.growing.5 (program 1.0.0 0)
valueOf.growing.6 (program 1.0.0 0)
valueOf.growing.7 (program 1.0.0 0)
valueOf.growing.8 (program 1.0.0 0)
valueOf.growing.9 (program 1.0.0 1)
valueOf.growing.10 (program 1.0.0 1)
valueOf.growing.11 (program 1.0.0 1)
valueOf.growing.12 (program 1.0.0 1)
valueOf.growing.13 (program 1.0.0 1)
valueOf.growing.14 (program 1.0.0 1)
valueOf.growing.15 (program 1.0.0 1)
valueOf.growing.16 (program 1.0.0 1)
valueOf.growing.17 (program 1.0.0 1)
unionWith.const (program 1.0.0 [(#41c0, #a149736f6d65746f6b656e01)])
unionWith.(+).itself (program 1.0.0 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> i1 (\i0 -> \i0 -> force (force (force chooseList) i2 (delay i1) (delay (i4 (\i0 -> \i0 -> i1) (force headList i2) (force tailList i2) i1)))) (\i0 -> \i0 -> \i0 -> force (force (force chooseList) i1 (delay (force mkCons i3 i2)) (delay ((\i0 -> (\i0 -> force (force ifThenElse (equalsData i2 i1) (delay (force mkCons (mkPairData i2 (i10 (force (force sndPair) i5) (force (force sndPair) (force headList i3)))) (i7 (\i0 -> \i0 -> i2) i4 (force tailList i3)))) (delay (force (force ifThenElse (lessThanByteString (unBData i2) (unBData i1)) (delay (force mkCons i5 (i7 (\i0 -> \i0 -> i1) (force headList i3) (force tailList i3) i4))) (delay (force mkCons (force headList i3) (i7 (\i0 -> \i0 -> i1) i5 i4 (force tailList i3))))))))) (force (force fstPair) (force headList i2))) (force (force fstPair) i3)))))) (\i0 -> \i0 -> i2) i2 i1) (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1)))) (\i0 -> \i0 -> (\i0 -> \i0 -> \i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> i1 (\i0 -> \i0 -> force (force (force chooseList) i2 (delay i1) (delay (i4 (\i0 -> \i0 -> i1) (force headList i2) (force tailList i2) i1)))) (\i0 -> \i0 -> \i0 -> force (force (force chooseList) i1 (delay (force mkCons i3 i2)) (delay ((\i0 -> (\i0 -> force (force ifThenElse (equalsData i2 i1) (delay (force mkCons (mkPairData i2 (i10 (force (force sndPair) i5) (force (force sndPair) (force headList i3)))) (i7 (\i0 -> \i0 -> i2) i4 (force tailList i3)))) (delay (force (force ifThenElse (lessThanByteString (unBData i2) (unBData i1)) (delay (force mkCons i5 (i7 (\i0 -> \i0 -> i1) (force headList i3) (force tailList i3) i4))) (delay (force mkCons (force headList i3) (i7 (\i0 -> \i0 -> i1) i5 i4 (force tailList i3))))))))) (force (force fstPair) (force headList i2))) (force (force fstPair) i3)))))) (\i0 -> \i0 -> i2) i2 i1) (\i0 -> \i0 -> iData (addInteger (unIData i2) (unIData i1))) i2 i1) i2 i1))
unionWith.(+).applied (program 1.0.0 [(#41c0, #a149736f6d65746f6b656e02)])
unionWith.tokens (program 1.0.0 [(#41c0, #a24a6f74686572746f6b656e0149736f6d65746f6b656e01)])
unionWith.symbols (program 1.0.0 [ (#41c0, #a149736f6d65746f6b656e01)
               , (#41c7, #a149736f6d65746f6b656e01) ])
unionWith.growing.1 (program 1.0.0 [ (#41c0, #a149736f6d65746f6b656e01)
               , (#41c7, #a149736f6d65746f6b656e01) ])
unionWith.growing.2 (program 1.0.0 [ (#41c0, #a249736f6d65746f6b656e0145746f6b656e01)
               , (#41c7, #a149736f6d65746f6b656e01) ])
unionWith.growing.3 (program 1.0.0 [ (#41c0, #a249736f6d65746f6b656e0145746f6b656e01)
               , (#41c1, #a145746f6b656e01)
               , (#41c7, #a149736f6d65746f6b656e01) ])
unionWith.growing.4 (program 1.0.0 [ (#41c0, #a249736f6d65746f6b656e0145746f6b656e01)
               , (#41c1, #a145746f6b656e01)
               , (#41c2, #a145746f6b656e01)
               , (#41c7, #a149736f6d65746f6b656e01) ])
unionWith.growing.5 (program 1.0.0 [ (#41c0, #a249736f6d65746f6b656e0145746f6b656e01)
               , (#41c1, #a145746f6b656e01)
               , (#41c2, #a145746f6b656e01)
               , (#41c3, #a145746f6b656e01)
               , (#41c7, #a149736f6d65746f6b656e01) ])
unionWith.growing.6 (program 1.0.0 [ (#41c0, #a249736f6d65746f6b656e0145746f6b656e01)
               , (#41c1, #a145746f6b656e01)
               , (#41c2, #a145746f6b656e01)
               , (#41c3, #a145746f6b656e01)
               , (#41c4, #a145746f6b656e01)
               , (#41c7, #a149736f6d65746f6b656e01) ])
unionWith.growing.7 (program 1.0.0 [ (#41c0, #a249736f6d65746f6b656e0145746f6b656e01)
               , (#41c1, #a145746f6b656e01)
               , (#41c2, #a145746f6b656e01)
               , (#41c3, #a145746f6b656e01)
               , (#41c4, #a145746f6b656e01)
               , (#41c5, #a145746f6b656e01)
               , (#41c7, #a149736f6d65746f6b656e01) ])
unionWith.growing.8 (program 1.0.0 [ (#41c0, #a249736f6d65746f6b656e0145746f6b656e01)
               , (#41c1, #a145746f6b656e01)
               , (#41c2, #a145746f6b656e01)
               , (#41c3, #a145746f6b656e01)
               , (#41c4, #a145746f6b656e01)
               , (#41c5, #a145746f6b656e01)
               , (#41c6, #a145746f6b656e01)
               , (#41c7, #a149736f6d65746f6b656e01) ])
unionWith.growing.9 (program 1.0.0 [ (#41c0, #a249736f6d65746f6b656e0145746f6b656e01)
               , (#41c1, #a145746f6b656e01)
               , (#41c2, #a145746f6b656e01)
               , (#41c3, #a145746f6b656e01)
               , (#41c4, #a145746f6b656e01)
               , (#41c5, #a145746f6b656e01)
               , (#41c6, #a145746f6b656e01)
               , (#41c7, #a249736f6d65746f6b656e0145746f6b656e01) ])
unionWith.growing.10 (program 1.0.0 [ (#41c0, #a249736f6d65746f6b656e0145746f6b656e01)
               , (#41c1, #a145746f6b656e01)
               , (#41c2, #a145746f6b656e01)
               , (#41c3, #a145746f6b656e01)
               , (#41c4, #a145746f6b656e01)
               , (#41c5, #a145746f6b656e01)
               , (#41c6, #a145746f6b656e01)
               , (#41c7, #a249736f6d65746f6b656e0145746f6b656e01)
               , (#41c8, #a145746f6b656e01) ])
unionWith.growing.11 (program 1.0.0 [ (#41c0, #a249736f6d65746f6b656e0145746f6b656e01)
               , (#41c1, #a145746f6b656e01)
               , (#41c2, #a145746f6b656e01)
               , (#41c3, #a145746f6b656e01)
               , (#41c4, #a145746f6b656e01)
               , (#41c5, #a145746f6b656e01)
               , (#41c6, #a145746f6b656e01)
               , (#41c7, #a249736f6d65746f6b656e0145746f6b656e01)
               , (#41c8, #a145746f6b656e01)
               , (#41c9, #a145746f6b656e01) ])
unionWith.growing.12 (program 1.0.0 [ (#41c0, #a249736f6d65746f6b656e0145746f6b656e01)
               , (#41c1, #a145746f6b656e01)
               , (#41c2, #a145746f6b656e01)
               , (#41c3, #a145746f6b656e01)
               , (#41c4, #a145746f6b656e01)
               , (#41c5, #a145746f6b656e01)
               , (#41c6, #a145746f6b656e01)
               , (#41c7, #a249736f6d65746f6b656e0145746f6b656e01)
               , (#41c8, #a145746f6b656e01)
               , (#41c9, #a145746f6b656e01)
               , (#41ca, #a145746f6b656e01) ])
unionWith.growing.13 (program 1.0.0 [ (#41c0, #a249736f6d65746f6b656e0145746f6b656e01)
               , (#41c1, #a145746f6b656e01)
               , (#41c2, #a145746f6b656e01)
               , (#41c3, #a145746f6b656e01)
               , (#41c4, #a145746f6b656e01)
               , (#41c5, #a145746f6b656e01)
               , (#41c6, #a145746f6b656e01)
               , (#41c7, #a249736f6d65746f6b656e0145746f6b656e01)
               , (#41c8, #a145746f6b656e01)
               , (#41c9, #a145746f6b656e01)
               , (#41ca, #a145746f6b656e01)
               , (#41cb, #a145746f6b656e01) ])
unionWith.growing.14 (program 1.0.0 [ (#41c0, #a249736f6d65746f6b656e0145746f6b656e01)
               , (#41c1, #a145746f6b656e01)
               , (#41c2, #a145746f6b656e01)
               , (#41c3, #a145746f6b656e01)
               , (#41c4, #a145746f6b656e01)
               , (#41c5, #a145746f6b656e01)
               , (#41c6, #a145746f6b656e01)
               , (#41c7, #a249736f6d65746f6b656e0145746f6b656e01)
               , (#41c8, #a145746f6b656e01)
               , (#41c9, #a145746f6b656e01)
               , (#41ca, #a145746f6b656e01)
               , (#41cb, #a145746f6b656e01)
               , (#41cc, #a145746f6b656e01) ])
unionWith.growing.15 (program 1.0.0 [ (#41c0, #a249736f6d65746f6b656e0145746f6b656e01)
               , (#41c1, #a145746f6b656e01)
               , (#41c2, #a145746f6b656e01)
               , (#41c3, #a145746f6b656e01)
               , (#41c4, #a145746f6b656e01)
               , (#41c5, #a145746f6b656e01)
               , (#41c6, #a145746f6b656e01)
               , (#41c7, #a249736f6d65746f6b656e0145746f6b656e01)
               , (#41c8, #a145746f6b656e01)
               , (#41c9, #a145746f6b656e01)
               , (#41ca, #a145746f6b656e01)
               , (#41cb, #a145746f6b656e01)
               , (#41cc, #a145746f6b656e01)
               , (#41cd, #a145746f6b656e01) ])
unionWith.growing.16 (program 1.0.0 [ (#41c0, #a249736f6d65746f6b656e0145746f6b656e01)
               , (#41c1, #a145746f6b656e01)
               , (#41c2, #a145746f6b656e01)
               , (#41c3, #a145746f6b656e01)
               , (#41c4, #a145746f6b656e01)
               , (#41c5, #a145746f6b656e01)
               , (#41c6, #a145746f6b656e01)
               , (#41c7, #a249736f6d65746f6b656e0145746f6b656e01)
               , (#41c8, #a145746f6b656e01)
               , (#41c9, #a145746f6b656e01)
               , (#41ca, #a145746f6b656e01)
               , (#41cb, #a145746f6b656e01)
               , (#41cc, #a145746f6b656e01)
               , (#41cd, #a145746f6b656e01)
               , (#41ce, #a145746f6b656e01) ])
unionWith.growing.17 (program 1.0.0 [ (#41c0, #a249736f6d65746f6b656e0145746f6b656e01)
               , (#41c1, #a145746f6b656e01)
               , (#41c2, #a145746f6b656e01)
               , (#41c3, #a145746f6b656e01)
               , (#41c4, #a145746f6b656e01)
               , (#41c5, #a145746f6b656e01)
               , (#41c6, #a145746f6b656e01)
               , (#41c7, #a249736f6d65746f6b656e0145746f6b656e01)
               , (#41c8, #a145746f6b656e01)
               , (#41c9, #a145746f6b656e01)
               , (#41ca, #a145746f6b656e01)
               , (#41cb, #a145746f6b656e01)
               , (#41cc, #a145746f6b656e01)
               , (#41cd, #a145746f6b656e01)
               , (#41ce, #a145746f6b656e01)
               , (#41cf, #a145746f6b656e01) ])
unionWithData const.itself (program 1.0.0 (\i0 -> \i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> i1 (\i0 -> \i0 -> force (force (force chooseList) i2 (delay i1) (delay (i4 (\i0 -> \i0 -> i1) (force headList i2) (force tailList i2) i1)))) (\i0 -> \i0 -> \i0 -> force (force (force chooseList) i1 (delay (force mkCons i3 i2)) (delay ((\i0 -> (\i0 -> force (force ifThenElse (equalsData i2 i1) (delay (force mkCons (mkPairData i2 (i10 (force (force sndPair) i5) (force (force sndPair) (force headList i3)))) (i7 (\i0 -> \i0 -> i2) i4 (force tailList i3)))) (delay (force (force ifThenElse (lessThanByteString (unBData i2) (unBData i1)) (delay (force mkCons i5 (i7 (\i0 -> \i0 -> i1) (force headList i3) (force tailList i3) i4))) (delay (force mkCons (force headList i3) (i7 (\i0 -> \i0 -> i1) i5 i4 (force tailList i3))))))))) (force (force fstPair) (force headList i2))) (force (force fstPair) i3)))))) (\i0 -> \i0 -> i2) i2 i1) (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1)))) (\i0 -> \i0 -> (\i0 -> \i0 -> \i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> i1 (\i0 -> \i0 -> force (force (force chooseList) i2 (delay i1) (delay (i4 (\i0 -> \i0 -> i1) (force headList i2) (force tailList i2) i1)))) (\i0 -> \i0 -> \i0 -> force (force (force chooseList) i1 (delay (force mkCons i3 i2)) (delay ((\i0 -> (\i0 -> force (force ifThenElse (equalsData i2 i1) (delay (force mkCons (mkPairData i2 (i10 (force (force sndPair) i5) (force (force sndPair) (force headList i3)))) (i7 (\i0 -> \i0 -> i2) i4 (force tailList i3)))) (delay (force (force ifThenElse (lessThanByteString (unBData i2) (unBData i1)) (delay (force mkCons i5 (i7 (\i0 -> \i0 -> i1) (force headList i3) (force tailList i3) i4))) (delay (force mkCons (force headList i3) (i7 (\i0 -> \i0 -> i1) i5 i4 (force tailList i3))))))))) (force (force fstPair) (force headList i2))) (force (force fstPair) i3)))))) (\i0 -> \i0 -> i2) i2 i1) i5 i2 i1) i2 i1))
unionWithData const.applied (program 1.0.0 [(#41c0, #a149736f6d65746f6b656e01)])
isZero.itself (program 1.0.0 (\i0 -> (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> force (force (force chooseList) i1 (delay True) (delay (force ((\i0 -> \i0 -> force ifThenElse i2 i1 (delay False)) (i3 (force headList i1)) (delay (i2 (force tailList i1))))))))) (\i0 -> i3 (unMapData (force (force sndPair) i1))) i1) ((\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> force (force (force chooseList) i1 (delay True) (delay (force ((\i0 -> \i0 -> force ifThenElse i2 i1 (delay False)) (i3 (force headList i1)) (delay (i2 (force tailList i1))))))))) (\i0 -> i3 (unIData (force (force sndPair) i1))) i1) (\i0 -> equalsInteger i1 0)) i1))
isZero.true (program 1.0.0 True)
isZero.false (program 1.0.0 False)
equality.itself (program 1.0.0 (\i0 -> \i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> force (force (force chooseList) i2 (delay (force (force (force chooseList) i1 (delay True) (delay False)))) (delay (force (force (force chooseList) i1 (delay False) (delay (force (force ifThenElse (force ((\i0 -> \i0 -> force ifThenElse i2 i1 (delay False)) (equalsData (force (force fstPair) (force headList i2)) (force (force fstPair) (force headList i1))) (delay (equalsData (force (force sndPair) (force headList i2)) (force (force sndPair) (force headList i1)))))) (delay (i3 (force tailList i2) (force tailList i1))) (delay False))))))))) i2 i1))
equality.triviallyTrue (program 1.0.0 True)
equality.triviallyFalse (program 1.0.0 False)
equality.swappedTokensTrue (program 1.0.0 True)
equality.swappedSymbolsTrue (program 1.0.0 True)
equality.growing.1 (program 1.0.0 True)
equality.growing.2 (program 1.0.0 True)
equality.growing.3 (program 1.0.0 True)
equality.growing.4 (program 1.0.0 True)
equality.growing.5 (program 1.0.0 True)
equality.growing.6 (program 1.0.0 True)
equality.growing.7 (program 1.0.0 True)
equality.growing.8 (program 1.0.0 True)
equality.growing.9 (program 1.0.0 True)
equality.growing.10 (program 1.0.0 True)
equality.growing.11 (program 1.0.0 True)
equality.growing.12 (program 1.0.0 True)
equality.growing.13 (program 1.0.0 True)
equality.growing.14 (program 1.0.0 True)
equality.growing.15 (program 1.0.0 True)
equality.growing.16 (program 1.0.0 True)
equality.growing.17 (program 1.0.0 True)
normalize.identity (program 1.0.0 [ (#41c0, #a149736f6d65746f6b656e01)
               , (#41c7, #a149736f6d65746f6b656e01) ])
normalize.empty (program 1.0.0 [])
assertSorted.succeeds (program 1.0.0 [ (#41c0, #a149736f6d65746f6b656e01)
               , (#41c7, #a149736f6d65746f6b656e01) ])
assertSorted.fails on malsorted symbols (program 1.0.0 error)
assertSorted.fails on zero quantities (program 1.0.0 error)
assertSorted.fails on empty token map (program 1.0.0 error)