singleton (program 1.0.0 [(#41c0, #a149736f6d65746f6b656e01)])
valueOf (program 1.0.0 1)
unionWith.const (program 1.0.0 [(#41c0, #a149736f6d65746f6b656e01)])
unionWith.(+).itself (program 1.0.0 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> force (force (force chooseList) i1 (delay (\i0 -> i1 [  ] [  ])) (delay (i2 (force tailList i1) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1)) (\i0 -> \i0 -> i1 (force mkCons (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (force mkCons (mkPairData i3 i2) i4)) (i7 i1 (force (force sndPair) (force headList i4)))) (force (force fstPair) (force headList i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2)) i1 i3 (\i0 -> \i0 -> (\i0 -> \i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> force (force (force chooseList) i1 (delay i3) (delay (force mkCons (force headList i1) (i2 (force tailList i1)))))) i2) i1 ((\i0 -> \i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> force (force (force chooseList) i1 (delay i3) (delay (force mkCons (force headList i1) (i2 (force tailList i1)))))) i2) i2 ((\i0 -> \i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> force (force (force chooseList) i1 (delay [  ]) (delay ((\i0 -> (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i3 i1) (delay i3)) (force mkCons (force headList i2) i1) (\i0 -> i2) ((\i0 -> \i0 -> \i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> force (force (force chooseList) i1 (delay (\i0 -> \i0 -> force i1)) (delay (force (force ifThenElse (equalsData (force (force fstPair) (force headList i1)) i4) (delay (i5 (force headList i1))) (delay (i2 (force tailList i1)))))))) i1) (\i0 -> \i0 -> \i0 -> i2 (force (force sndPair) i3)) (force (force fstPair) (force headList i2)) i4)) (i2 (force tailList i1)))))) i2) i4 i1)))) (\i0 -> \i0 -> (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i3 i1) (delay i3)) (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) ((\i0 -> \i0 -> \i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> force (force (force chooseList) i1 (delay (\i0 -> \i0 -> force i1)) (delay (force (force ifThenElse (equalsData (force (force fstPair) (force headList i1)) i4) (delay (i5 (force headList i1))) (delay (i2 (force tailList i1)))))))) i1) (\i0 -> \i0 -> \i0 -> i2 (force (force sndPair) i3)) i2 i3))) (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1)))) (\i0 -> \i0 -> (\i0 -> \i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> force (force (force chooseList) i1 (delay (\i0 -> i1 [  ] [  ])) (delay (i2 (force tailList i1) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1)) (\i0 -> \i0 -> i1 (force mkCons (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (force mkCons (mkPairData i3 i2) i4)) (i7 i1 (force (force sndPair) (force headList i4)))) (force (force fstPair) (force headList i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2)) i1 i3 (\i0 -> \i0 -> (\i0 -> \i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> force (force (force chooseList) i1 (delay i3) (delay (force mkCons (force headList i1) (i2 (force tailList i1)))))) i2) i1 ((\i0 -> \i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> force (force (force chooseList) i1 (delay i3) (delay (force mkCons (force headList i1) (i2 (force tailList i1)))))) i2) i2 ((\i0 -> \i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> force (force (force chooseList) i1 (delay [  ]) (delay ((\i0 -> (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i3 i1) (delay i3)) (force mkCons (force headList i2) i1) (\i0 -> i2) ((\i0 -> \i0 -> \i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> force (force (force chooseList) i1 (delay (\i0 -> \i0 -> force i1)) (delay (force (force ifThenElse (equalsData (force (force fstPair) (force headList i1)) i4) (delay (i5 (force headList i1))) (delay (i2 (force tailList i1)))))))) i1) (\i0 -> \i0 -> \i0 -> i2 (force (force sndPair) i3)) (force (force fstPair) (force headList i2)) i4)) (i2 (force tailList i1)))))) i2) i4 i1)))) (\i0 -> \i0 -> (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i3 i1) (delay i3)) (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) ((\i0 -> \i0 -> \i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> force (force (force chooseList) i1 (delay (\i0 -> \i0 -> force i1)) (delay (force (force ifThenElse (equalsData (force (force fstPair) (force headList i1)) i4) (delay (i5 (force headList i1))) (delay (i2 (force tailList i1)))))))) i1) (\i0 -> \i0 -> \i0 -> i2 (force (force sndPair) i3)) i2 i3))) (\i0 -> \i0 -> iData (addInteger (unIData i2) (unIData i1))) i2 i1) i2 i1))
unionWith.(+).applied (program 1.0.0 [(#41c0, #a149736f6d65746f6b656e02)])
unionWith.tokens (program 1.0.0 [(#41c0, #a249736f6d65746f6b656e014a6f74686572746f6b656e01)])
unionWith.symbols (program 1.0.0 [ (#41c0, #a149736f6d65746f6b656e01)
               , (#41c2, #a149736f6d65746f6b656e01) ])
isZero.itself (program 1.0.0 (\i0 -> (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> force (force (force chooseList) i1 (delay True) (delay (force ((\i0 -> \i0 -> force ifThenElse i2 i1 (delay False)) (i3 (force headList i1)) (delay (i2 (force tailList i1))))))))) (\i0 -> i3 (unMapData (force (force sndPair) i1))) i1) ((\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> force (force (force chooseList) i1 (delay True) (delay (force ((\i0 -> \i0 -> force ifThenElse i2 i1 (delay False)) (i3 (force headList i1)) (delay (i2 (force tailList i1))))))))) (\i0 -> i3 (unIData (force (force sndPair) i1))) i1) (\i0 -> equalsInteger i1 0)) i1))
isZero.true (program 1.0.0 True)
isZero.false (program 1.0.0 False)
equality.itself (program 1.0.0 (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> force (force (force chooseList) i1 (delay True) (delay (force ((\i0 -> \i0 -> force ifThenElse i2 i1 (delay False)) (i3 (force headList i1)) (delay (i2 (force tailList i1))))))))) (\i0 -> i3 (unMapData (force (force sndPair) i1))) i1) ((\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> force (force (force chooseList) i1 (delay True) (delay (force ((\i0 -> \i0 -> force ifThenElse i2 i1 (delay False)) (i3 (force headList i1)) (delay (i2 (force tailList i1))))))))) (\i0 -> i3 (unIData (force (force sndPair) i1))) i1) (\i0 -> equalsInteger i1 0)) i1) ((\i0 -> (\i0 -> \i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> force (force (force chooseList) i1 (delay (\i0 -> i1 [  ] [  ])) (delay (i2 (force tailList i1) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1)) (\i0 -> \i0 -> i1 (force mkCons (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (force mkCons (mkPairData i3 i2) i4)) (i7 i1 (force (force sndPair) (force headList i4)))) (force (force fstPair) (force headList i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2)) i1 i3 (\i0 -> \i0 -> (\i0 -> \i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> force (force (force chooseList) i1 (delay i3) (delay (force mkCons (force headList i1) (i2 (force tailList i1)))))) i2) i1 ((\i0 -> \i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> force (force (force chooseList) i1 (delay i3) (delay (force mkCons (force headList i1) (i2 (force tailList i1)))))) i2) i2 ((\i0 -> \i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> force (force (force chooseList) i1 (delay [  ]) (delay ((\i0 -> (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i3 i1) (delay i3)) (force mkCons (force headList i2) i1) (\i0 -> i2) ((\i0 -> \i0 -> \i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> force (force (force chooseList) i1 (delay (\i0 -> \i0 -> force i1)) (delay (force (force ifThenElse (equalsData (force (force fstPair) (force headList i1)) i4) (delay (i5 (force headList i1))) (delay (i2 (force tailList i1)))))))) i1) (\i0 -> \i0 -> \i0 -> i2 (force (force sndPair) i3)) (force (force fstPair) (force headList i2)) i4)) (i2 (force tailList i1)))))) i2) i4 i1)))) (\i0 -> \i0 -> (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i3 i1) (delay i3)) (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) ((\i0 -> \i0 -> \i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> force (force (force chooseList) i1 (delay (\i0 -> \i0 -> force i1)) (delay (force (force ifThenElse (equalsData (force (force fstPair) (force headList i1)) i4) (delay (i5 (force headList i1))) (delay (i2 (force tailList i1)))))))) i1) (\i0 -> \i0 -> \i0 -> i2 (force (force sndPair) i3)) i2 i3))) (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1)))) (\i0 -> \i0 -> (\i0 -> \i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> force (force (force chooseList) i1 (delay (\i0 -> i1 [  ] [  ])) (delay (i2 (force tailList i1) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1)) (\i0 -> \i0 -> i1 (force mkCons (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (force mkCons (mkPairData i3 i2) i4)) (i7 i1 (force (force sndPair) (force headList i4)))) (force (force fstPair) (force headList i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2)) i1 i3 (\i0 -> \i0 -> (\i0 -> \i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> force (force (force chooseList) i1 (delay i3) (delay (force mkCons (force headList i1) (i2 (force tailList i1)))))) i2) i1 ((\i0 -> \i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> force (force (force chooseList) i1 (delay i3) (delay (force mkCons (force headList i1) (i2 (force tailList i1)))))) i2) i2 ((\i0 -> \i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> force (force (force chooseList) i1 (delay [  ]) (delay ((\i0 -> (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i3 i1) (delay i3)) (force mkCons (force headList i2) i1) (\i0 -> i2) ((\i0 -> \i0 -> \i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> force (force (force chooseList) i1 (delay (\i0 -> \i0 -> force i1)) (delay (force (force ifThenElse (equalsData (force (force fstPair) (force headList i1)) i4) (delay (i5 (force headList i1))) (delay (i2 (force tailList i1)))))))) i1) (\i0 -> \i0 -> \i0 -> i2 (force (force sndPair) i3)) (force (force fstPair) (force headList i2)) i4)) (i2 (force tailList i1)))))) i2) i4 i1)))) (\i0 -> \i0 -> (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i3 i1) (delay i3)) (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) ((\i0 -> \i0 -> \i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> force (force (force chooseList) i1 (delay (\i0 -> \i0 -> force i1)) (delay (force (force ifThenElse (equalsData (force (force fstPair) (force headList i1)) i4) (delay (i5 (force headList i1))) (delay (i2 (force tailList i1)))))))) i1) (\i0 -> \i0 -> \i0 -> i2 (force (force sndPair) i3)) i2 i3))) (\i0 -> \i0 -> iData (subtractInteger (unIData i2) (unIData i1))) i2 i1) i2 i1)))
equality.triviallyTrue (program 1.0.0 True)
equality.triviallyFalse (program 1.0.0 False)
equality.swappedTokensTrue (program 1.0.0 True)
equality.swappedSymbolsTrue (program 1.0.0 True)