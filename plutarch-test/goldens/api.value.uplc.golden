singleton (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> (\i0 -> i5 (bData i4) (mapData i1)) (i4 (bData i2) (iData i1))) #c0 #736f6d65746f6b656e 1) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]))
valueOf.itself (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> \i0 -> i4 i2 0 (\i0 -> i5 i2 0 unIData (unMapData i1)) i3) (\i0 -> i2 (bData i1))) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)))
valueOf.applied (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i4 i2 0 (\i0 -> i5 i2 0 unIData (unMapData i1)) i3) ((\i0 -> (\i0 -> i12 (bData i15) (mapData i1)) (i11 (bData i15) (iData i1))) 1) i13 i14) (\i0 -> i2 (bData i1))) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c0) #736f6d65746f6b656e))
valueOf.growing.1 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i4 i2 0 (\i0 -> i5 i2 0 unIData (unMapData i1)) i3) ((\i0 -> \i0 -> \i0 -> (\i0 -> i14 (bData i4) (mapData i1)) (i13 (bData i2) (iData i1))) #c0 #736f6d65746f6b656e 1) #c7 #746f6b656e) (\i0 -> i2 (bData i1))) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]))
valueOf.growing.2 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i4 i2 0 (\i0 -> i5 i2 0 unIData (unMapData i1)) i3) ((\i0 -> \i0 -> (\i0 -> i5 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1)))) (\i0 -> \i0 -> i6 (\i0 -> \i0 -> iData (addInteger (unIData i2) (unIData i1))) i2 i1) i2 i1) (i15 i21 #736f6d65746f6b656e 1) (i15 i21 i22 1)) #c7 i22) (\i0 -> i7 (bData i1))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i22 i22)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i25 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i25 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i18 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i18) (delay ((\i0 -> i6 (i10 (i12 i2)) (i18 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c0) #746f6b656e))
valueOf.growing.3 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i4 i2 0 (\i0 -> i5 i2 0 unIData (unMapData i1)) i3) (i2 addInteger (i2 addInteger (i19 i18 #736f6d65746f6b656e 1) (i19 i18 i25 1)) (i19 #c1 i25 1)) #c7 i25) (\i0 -> i10 (bData i1))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i23 i23)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i26 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i26 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i19 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i19) (delay ((\i0 -> i6 (i10 (i12 i2)) (i19 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #c0) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #746f6b656e))
valueOf.growing.4 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i4 i2 0 (\i0 -> i5 i2 0 unIData (unMapData i1)) i3) (i2 addInteger (i2 addInteger (i2 addInteger (i19 i18 #736f6d65746f6b656e 1) (i19 i18 i25 1)) (i19 #c1 i25 1)) (i19 #c2 i25 1)) #c7 i25) (\i0 -> i10 (bData i1))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i23 i23)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i26 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i26 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i19 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i19) (delay ((\i0 -> i6 (i10 (i12 i2)) (i19 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #c0) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #746f6b656e))
valueOf.growing.5 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i4 i2 0 (\i0 -> i5 i2 0 unIData (unMapData i1)) i3) (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i19 i18 #736f6d65746f6b656e 1) (i19 i18 i25 1)) (i19 #c1 i25 1)) (i19 #c2 i25 1)) (i19 #c3 i25 1)) #c7 i25) (\i0 -> i10 (bData i1))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i23 i23)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i26 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i26 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i19 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i19) (delay ((\i0 -> i6 (i10 (i12 i2)) (i19 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #c0) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #746f6b656e))
valueOf.growing.6 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i4 i2 0 (\i0 -> i5 i2 0 unIData (unMapData i1)) i3) (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i19 i18 #736f6d65746f6b656e 1) (i19 i18 i25 1)) (i19 #c1 i25 1)) (i19 #c2 i25 1)) (i19 #c3 i25 1)) (i19 #c4 i25 1)) #c7 i25) (\i0 -> i10 (bData i1))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i23 i23)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i26 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i26 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i19 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i19) (delay ((\i0 -> i6 (i10 (i12 i2)) (i19 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #c0) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #746f6b656e))
valueOf.growing.7 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i4 i2 0 (\i0 -> i5 i2 0 unIData (unMapData i1)) i3) (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i19 i18 #736f6d65746f6b656e 1) (i19 i18 i25 1)) (i19 #c1 i25 1)) (i19 #c2 i25 1)) (i19 #c3 i25 1)) (i19 #c4 i25 1)) (i19 #c5 i25 1)) #c7 i25) (\i0 -> i10 (bData i1))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i23 i23)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i26 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i26 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i19 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i19) (delay ((\i0 -> i6 (i10 (i12 i2)) (i19 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #c0) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #746f6b656e))
valueOf.growing.8 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i4 i2 0 (\i0 -> i5 i2 0 unIData (unMapData i1)) i3) (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i19 i18 #736f6d65746f6b656e 1) (i19 i18 i25 1)) (i19 #c1 i25 1)) (i19 #c2 i25 1)) (i19 #c3 i25 1)) (i19 #c4 i25 1)) (i19 #c5 i25 1)) (i19 #c6 i25 1)) #c7 i25) (\i0 -> i10 (bData i1))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i23 i23)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i26 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i26 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i19 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i19) (delay ((\i0 -> i6 (i10 (i12 i2)) (i19 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #c0) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #746f6b656e))
valueOf.growing.9 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i4 i2 0 (\i0 -> i5 i2 0 unIData (unMapData i1)) i3) (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i19 i18 #736f6d65746f6b656e 1) (i19 i18 i26 1)) (i19 #c1 i26 1)) (i19 #c2 i26 1)) (i19 #c3 i26 1)) (i19 #c4 i26 1)) (i19 #c5 i26 1)) (i19 #c6 i26 1)) (i19 i25 i26 1)) i25 i26) (\i0 -> i10 (bData i1))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i23 i23)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i26 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i26 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i19 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i19) (delay ((\i0 -> i6 (i10 (i12 i2)) (i19 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #c0) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c7) #746f6b656e))
valueOf.growing.10 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i4 i2 0 (\i0 -> i5 i2 0 unIData (unMapData i1)) i3) (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i19 i18 #736f6d65746f6b656e 1) (i19 i18 i26 1)) (i19 #c1 i26 1)) (i19 #c2 i26 1)) (i19 #c3 i26 1)) (i19 #c4 i26 1)) (i19 #c5 i26 1)) (i19 #c6 i26 1)) (i19 i25 i26 1)) (i19 #c8 i26 1)) i25 i26) (\i0 -> i10 (bData i1))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i23 i23)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i26 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i26 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i19 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i19) (delay ((\i0 -> i6 (i10 (i12 i2)) (i19 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #c0) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c7) #746f6b656e))
valueOf.growing.11 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i4 i2 0 (\i0 -> i5 i2 0 unIData (unMapData i1)) i3) (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i19 i18 #736f6d65746f6b656e 1) (i19 i18 i26 1)) (i19 #c1 i26 1)) (i19 #c2 i26 1)) (i19 #c3 i26 1)) (i19 #c4 i26 1)) (i19 #c5 i26 1)) (i19 #c6 i26 1)) (i19 i25 i26 1)) (i19 #c8 i26 1)) (i19 #c9 i26 1)) i25 i26) (\i0 -> i10 (bData i1))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i23 i23)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i26 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i26 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i19 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i19) (delay ((\i0 -> i6 (i10 (i12 i2)) (i19 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #c0) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c7) #746f6b656e))
valueOf.growing.12 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i4 i2 0 (\i0 -> i5 i2 0 unIData (unMapData i1)) i3) (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i19 i18 #736f6d65746f6b656e 1) (i19 i18 i26 1)) (i19 #c1 i26 1)) (i19 #c2 i26 1)) (i19 #c3 i26 1)) (i19 #c4 i26 1)) (i19 #c5 i26 1)) (i19 #c6 i26 1)) (i19 i25 i26 1)) (i19 #c8 i26 1)) (i19 #c9 i26 1)) (i19 #ca i26 1)) i25 i26) (\i0 -> i10 (bData i1))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i23 i23)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i26 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i26 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i19 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i19) (delay ((\i0 -> i6 (i10 (i12 i2)) (i19 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #c0) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c7) #746f6b656e))
valueOf.growing.13 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i4 i2 0 (\i0 -> i5 i2 0 unIData (unMapData i1)) i3) (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i19 i18 #736f6d65746f6b656e 1) (i19 i18 i26 1)) (i19 #c1 i26 1)) (i19 #c2 i26 1)) (i19 #c3 i26 1)) (i19 #c4 i26 1)) (i19 #c5 i26 1)) (i19 #c6 i26 1)) (i19 i25 i26 1)) (i19 #c8 i26 1)) (i19 #c9 i26 1)) (i19 #ca i26 1)) (i19 #cb i26 1)) i25 i26) (\i0 -> i10 (bData i1))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i23 i23)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i26 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i26 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i19 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i19) (delay ((\i0 -> i6 (i10 (i12 i2)) (i19 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #c0) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c7) #746f6b656e))
valueOf.growing.14 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i4 i2 0 (\i0 -> i5 i2 0 unIData (unMapData i1)) i3) (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i19 i18 #736f6d65746f6b656e 1) (i19 i18 i26 1)) (i19 #c1 i26 1)) (i19 #c2 i26 1)) (i19 #c3 i26 1)) (i19 #c4 i26 1)) (i19 #c5 i26 1)) (i19 #c6 i26 1)) (i19 i25 i26 1)) (i19 #c8 i26 1)) (i19 #c9 i26 1)) (i19 #ca i26 1)) (i19 #cb i26 1)) (i19 #cc i26 1)) i25 i26) (\i0 -> i10 (bData i1))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i23 i23)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i26 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i26 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i19 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i19) (delay ((\i0 -> i6 (i10 (i12 i2)) (i19 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #c0) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c7) #746f6b656e))
valueOf.growing.15 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i4 i2 0 (\i0 -> i5 i2 0 unIData (unMapData i1)) i3) (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i19 i18 #736f6d65746f6b656e 1) (i19 i18 i26 1)) (i19 #c1 i26 1)) (i19 #c2 i26 1)) (i19 #c3 i26 1)) (i19 #c4 i26 1)) (i19 #c5 i26 1)) (i19 #c6 i26 1)) (i19 i25 i26 1)) (i19 #c8 i26 1)) (i19 #c9 i26 1)) (i19 #ca i26 1)) (i19 #cb i26 1)) (i19 #cc i26 1)) (i19 #cd i26 1)) i25 i26) (\i0 -> i10 (bData i1))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i23 i23)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i26 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i26 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i19 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i19) (delay ((\i0 -> i6 (i10 (i12 i2)) (i19 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #c0) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c7) #746f6b656e))
valueOf.growing.16 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i4 i2 0 (\i0 -> i5 i2 0 unIData (unMapData i1)) i3) (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i19 i18 #736f6d65746f6b656e 1) (i19 i18 i26 1)) (i19 #c1 i26 1)) (i19 #c2 i26 1)) (i19 #c3 i26 1)) (i19 #c4 i26 1)) (i19 #c5 i26 1)) (i19 #c6 i26 1)) (i19 i25 i26 1)) (i19 #c8 i26 1)) (i19 #c9 i26 1)) (i19 #ca i26 1)) (i19 #cb i26 1)) (i19 #cc i26 1)) (i19 #cd i26 1)) (i19 #ce i26 1)) i25 i26) (\i0 -> i10 (bData i1))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i23 i23)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i26 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i26 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i19 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i19) (delay ((\i0 -> i6 (i10 (i12 i2)) (i19 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #c0) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c7) #746f6b656e))
valueOf.growing.17 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i4 i2 0 (\i0 -> i5 i2 0 unIData (unMapData i1)) i3) (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i2 addInteger (i19 i18 #736f6d65746f6b656e 1) (i19 i18 i26 1)) (i19 #c1 i26 1)) (i19 #c2 i26 1)) (i19 #c3 i26 1)) (i19 #c4 i26 1)) (i19 #c5 i26 1)) (i19 #c6 i26 1)) (i19 i25 i26 1)) (i19 #c8 i26 1)) (i19 #c9 i26 1)) (i19 #ca i26 1)) (i19 #cb i26 1)) (i19 #cc i26 1)) (i19 #cd i26 1)) (i19 #ce i26 1)) (i19 #cf i26 1)) i25 i26) (\i0 -> i10 (bData i1))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i23 i23)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i26 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i26 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i19 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i19) (delay ((\i0 -> i6 (i10 (i12 i2)) (i19 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #c0) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c7) #746f6b656e))
unionWith.const (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> (\i0 -> i5 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1)))) (\i0 -> \i0 -> i6 (\i0 -> \i0 -> iData (i7 (unIData i2) (unIData i1))) i2 i1) i2 i1) (\i0 -> \i0 -> i2) (i14 i20 i21 1) (i14 i20 i21 1)) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i22 i22)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i25 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i25 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i18 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i18) (delay ((\i0 -> i6 (i10 (i12 i2)) (i18 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c0) #736f6d65746f6b656e))
unionWith.(+).itself (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> (\i0 -> i4 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1)))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> iData (addInteger (unIData i2) (unIData i1))) i2 i1) i2 i1) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i12 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i9 (\i0 -> \i0 -> force (i12 i1 (delay (\i0 -> i1 i9 i9)) (delay (i2 (i17 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i14 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i14 (mkPairData i3 i2) i4)) (i7 i1 (i18 (i19 i4)))) (i16 (i18 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay i3) (delay (i7 (i14 i1) (i2 (i15 i1)))))) i2)) (\i0 -> \i0 -> i6 (\i0 -> \i0 -> force (i9 i1 (delay i5) (delay ((\i0 -> i8 (i12 (i14 i2)) (i7 (i14 i2) i1) (\i0 -> i2) i4) (i2 (i14 i1)))))) i2)) [  ]) (force mkCons)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)))
unionWith.(+).applied (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> (\i0 -> i4 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1)))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> iData (addInteger (unIData i2) (unIData i1))) i2 i1) i2 i1) (i14 i20 i21 1) (i14 i20 i21 1)) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i22 i22)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i25 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i25 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i18 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i18) (delay ((\i0 -> i6 (i10 (i12 i2)) (i18 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c0) #736f6d65746f6b656e))
unionWith.tokens (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> (\i0 -> i4 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1)))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> iData (addInteger (unIData i2) (unIData i1))) i2 i1) i2 i1) (i14 i20 #736f6d65746f6b656e 1) (i14 i20 #6f74686572746f6b656e 1)) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i22 i22)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i25 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i25 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i18 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i18) (delay ((\i0 -> i6 (i10 (i12 i2)) (i18 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c0))
unionWith.symbols (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> (\i0 -> i4 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1)))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> iData (addInteger (unIData i2) (unIData i1))) i2 i1) i2 i1) (i14 #c0 i20 1) (i14 #c7 i20 1)) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i22 i22)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i25 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i25 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i18 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i18) (delay ((\i0 -> i6 (i10 (i12 i2)) (i18 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #736f6d65746f6b656e))
unionWith.growing.1 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> (\i0 -> i5 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1)))) (\i0 -> \i0 -> i6 (\i0 -> \i0 -> iData (i7 (unIData i2) (unIData i1))) i2 i1) i2 i1) (\i0 -> \i0 -> i2) (i14 #c0 i20 1) (i14 #c7 i20 1)) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i22 i22)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i25 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i25 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i18 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i18) (delay ((\i0 -> i6 (i10 (i12 i2)) (i18 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #736f6d65746f6b656e))
unionWith.growing.2 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> i2) (i1 addInteger (i18 i17 i24 1) (i18 i17 #746f6b656e 1)) (i18 #c7 i24 1)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i23 i23)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i26 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i26 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i19 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i19) (delay ((\i0 -> i6 (i10 (i12 i2)) (i19 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #c0) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #736f6d65746f6b656e))
unionWith.growing.3 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> i2) (i1 addInteger (i1 addInteger (i19 i17 i25 1) (i19 i17 i18 1)) (i19 #c1 i18 1)) (i19 #c7 i25 1)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i24 i24)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i27 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i27 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i20 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i20) (delay ((\i0 -> i6 (i10 (i12 i2)) (i20 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #c0) #746f6b656e) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #736f6d65746f6b656e))
unionWith.growing.4 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> i2) (i1 addInteger (i1 addInteger (i1 addInteger (i19 i17 i25 1) (i19 i17 i18 1)) (i19 #c1 i18 1)) (i19 #c2 i18 1)) (i19 #c7 i25 1)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i24 i24)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i27 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i27 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i20 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i20) (delay ((\i0 -> i6 (i10 (i12 i2)) (i20 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #c0) #746f6b656e) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #736f6d65746f6b656e))
unionWith.growing.5 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> i2) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i19 i17 i25 1) (i19 i17 i18 1)) (i19 #c1 i18 1)) (i19 #c2 i18 1)) (i19 #c3 i18 1)) (i19 #c7 i25 1)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i24 i24)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i27 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i27 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i20 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i20) (delay ((\i0 -> i6 (i10 (i12 i2)) (i20 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #c0) #746f6b656e) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #736f6d65746f6b656e))
unionWith.growing.6 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> i2) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i19 i17 i25 1) (i19 i17 i18 1)) (i19 #c1 i18 1)) (i19 #c2 i18 1)) (i19 #c3 i18 1)) (i19 #c4 i18 1)) (i19 #c7 i25 1)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i24 i24)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i27 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i27 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i20 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i20) (delay ((\i0 -> i6 (i10 (i12 i2)) (i20 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #c0) #746f6b656e) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #736f6d65746f6b656e))
unionWith.growing.7 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> i2) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i19 i17 i25 1) (i19 i17 i18 1)) (i19 #c1 i18 1)) (i19 #c2 i18 1)) (i19 #c3 i18 1)) (i19 #c4 i18 1)) (i19 #c5 i18 1)) (i19 #c7 i25 1)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i24 i24)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i27 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i27 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i20 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i20) (delay ((\i0 -> i6 (i10 (i12 i2)) (i20 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #c0) #746f6b656e) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #736f6d65746f6b656e))
unionWith.growing.8 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> i2) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i19 i17 i25 1) (i19 i17 i18 1)) (i19 #c1 i18 1)) (i19 #c2 i18 1)) (i19 #c3 i18 1)) (i19 #c4 i18 1)) (i19 #c5 i18 1)) (i19 #c6 i18 1)) (i19 #c7 i25 1)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i24 i24)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i27 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i27 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i20 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i20) (delay ((\i0 -> i6 (i10 (i12 i2)) (i20 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #c0) #746f6b656e) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #736f6d65746f6b656e))
unionWith.growing.9 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> i2) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i19 i17 i26 1) (i19 i17 i18 1)) (i19 #c1 i18 1)) (i19 #c2 i18 1)) (i19 #c3 i18 1)) (i19 #c4 i18 1)) (i19 #c5 i18 1)) (i19 #c6 i18 1)) (i19 i25 i18 1)) (i19 i25 i26 1)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i24 i24)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i27 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i27 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i20 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i20) (delay ((\i0 -> i6 (i10 (i12 i2)) (i20 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #c0) #746f6b656e) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c7) #736f6d65746f6b656e))
unionWith.growing.10 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> i2) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i19 i17 i26 1) (i19 i17 i18 1)) (i19 #c1 i18 1)) (i19 #c2 i18 1)) (i19 #c3 i18 1)) (i19 #c4 i18 1)) (i19 #c5 i18 1)) (i19 #c6 i18 1)) (i19 i25 i18 1)) (i19 #c8 i18 1)) (i19 i25 i26 1)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i24 i24)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i27 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i27 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i20 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i20) (delay ((\i0 -> i6 (i10 (i12 i2)) (i20 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #c0) #746f6b656e) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c7) #736f6d65746f6b656e))
unionWith.growing.11 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> i2) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i19 i17 i26 1) (i19 i17 i18 1)) (i19 #c1 i18 1)) (i19 #c2 i18 1)) (i19 #c3 i18 1)) (i19 #c4 i18 1)) (i19 #c5 i18 1)) (i19 #c6 i18 1)) (i19 i25 i18 1)) (i19 #c8 i18 1)) (i19 #c9 i18 1)) (i19 i25 i26 1)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i24 i24)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i27 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i27 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i20 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i20) (delay ((\i0 -> i6 (i10 (i12 i2)) (i20 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #c0) #746f6b656e) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c7) #736f6d65746f6b656e))
unionWith.growing.12 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> i2) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i19 i17 i26 1) (i19 i17 i18 1)) (i19 #c1 i18 1)) (i19 #c2 i18 1)) (i19 #c3 i18 1)) (i19 #c4 i18 1)) (i19 #c5 i18 1)) (i19 #c6 i18 1)) (i19 i25 i18 1)) (i19 #c8 i18 1)) (i19 #c9 i18 1)) (i19 #ca i18 1)) (i19 i25 i26 1)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i24 i24)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i27 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i27 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i20 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i20) (delay ((\i0 -> i6 (i10 (i12 i2)) (i20 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #c0) #746f6b656e) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c7) #736f6d65746f6b656e))
unionWith.growing.13 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> i2) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i19 i17 i26 1) (i19 i17 i18 1)) (i19 #c1 i18 1)) (i19 #c2 i18 1)) (i19 #c3 i18 1)) (i19 #c4 i18 1)) (i19 #c5 i18 1)) (i19 #c6 i18 1)) (i19 i25 i18 1)) (i19 #c8 i18 1)) (i19 #c9 i18 1)) (i19 #ca i18 1)) (i19 #cb i18 1)) (i19 i25 i26 1)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i24 i24)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i27 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i27 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i20 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i20) (delay ((\i0 -> i6 (i10 (i12 i2)) (i20 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #c0) #746f6b656e) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c7) #736f6d65746f6b656e))
unionWith.growing.14 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> i2) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i19 i17 i26 1) (i19 i17 i18 1)) (i19 #c1 i18 1)) (i19 #c2 i18 1)) (i19 #c3 i18 1)) (i19 #c4 i18 1)) (i19 #c5 i18 1)) (i19 #c6 i18 1)) (i19 i25 i18 1)) (i19 #c8 i18 1)) (i19 #c9 i18 1)) (i19 #ca i18 1)) (i19 #cb i18 1)) (i19 #cc i18 1)) (i19 i25 i26 1)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i24 i24)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i27 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i27 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i20 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i20) (delay ((\i0 -> i6 (i10 (i12 i2)) (i20 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #c0) #746f6b656e) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c7) #736f6d65746f6b656e))
unionWith.growing.15 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> i2) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i19 i17 i26 1) (i19 i17 i18 1)) (i19 #c1 i18 1)) (i19 #c2 i18 1)) (i19 #c3 i18 1)) (i19 #c4 i18 1)) (i19 #c5 i18 1)) (i19 #c6 i18 1)) (i19 i25 i18 1)) (i19 #c8 i18 1)) (i19 #c9 i18 1)) (i19 #ca i18 1)) (i19 #cb i18 1)) (i19 #cc i18 1)) (i19 #cd i18 1)) (i19 i25 i26 1)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i24 i24)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i27 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i27 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i20 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i20) (delay ((\i0 -> i6 (i10 (i12 i2)) (i20 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #c0) #746f6b656e) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c7) #736f6d65746f6b656e))
unionWith.growing.16 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> i2) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i19 i17 i26 1) (i19 i17 i18 1)) (i19 #c1 i18 1)) (i19 #c2 i18 1)) (i19 #c3 i18 1)) (i19 #c4 i18 1)) (i19 #c5 i18 1)) (i19 #c6 i18 1)) (i19 i25 i18 1)) (i19 #c8 i18 1)) (i19 #c9 i18 1)) (i19 #ca i18 1)) (i19 #cb i18 1)) (i19 #cc i18 1)) (i19 #cd i18 1)) (i19 #ce i18 1)) (i19 i25 i26 1)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i24 i24)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i27 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i27 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i20 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i20) (delay ((\i0 -> i6 (i10 (i12 i2)) (i20 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #c0) #746f6b656e) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c7) #736f6d65746f6b656e))
unionWith.growing.17 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> i2) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i19 i17 i26 1) (i19 i17 i18 1)) (i19 #c1 i18 1)) (i19 #c2 i18 1)) (i19 #c3 i18 1)) (i19 #c4 i18 1)) (i19 #c5 i18 1)) (i19 #c6 i18 1)) (i19 i25 i18 1)) (i19 #c8 i18 1)) (i19 #c9 i18 1)) (i19 #ca i18 1)) (i19 #cb i18 1)) (i19 #cc i18 1)) (i19 #cd i18 1)) (i19 #ce i18 1)) (i19 #cf i18 1)) (i19 i25 i26 1)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i24 i24)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i27 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i27 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i20 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i20) (delay ((\i0 -> i6 (i10 (i12 i2)) (i20 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #c0) #746f6b656e) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c7) #736f6d65746f6b656e))
unionWithData const.itself (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> \i0 -> (\i0 -> i5 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1)))) (\i0 -> \i0 -> i6 i5 i2 i1) i2 i1) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i12 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i9 (\i0 -> \i0 -> force (i12 i1 (delay (\i0 -> i1 i9 i9)) (delay (i2 (i17 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i14 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i14 (mkPairData i3 i2) i4)) (i7 i1 (i18 (i19 i4)))) (i16 (i18 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay i3) (delay (i7 (i14 i1) (i2 (i15 i1)))))) i2)) (\i0 -> \i0 -> i6 (\i0 -> \i0 -> force (i9 i1 (delay i5) (delay ((\i0 -> i8 (i12 (i14 i2)) (i7 (i14 i2) i1) (\i0 -> i2) i4) (i2 (i14 i1)))))) i2)) [  ]) (force mkCons)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)))
unionWithData const.applied (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> (\i0 -> i5 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1)))) (\i0 -> \i0 -> i6 i5 i2 i1) i2 i1) (\i0 -> \i0 -> i2) (i14 i20 i21 1) (i14 i20 i21 1)) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i22 i22)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i25 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i25 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i18 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i18) (delay ((\i0 -> i6 (i10 (i12 i2)) (i18 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c0) #736f6d65746f6b656e))
isZero.itself (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> (\i0 -> \i0 -> i4 (\i0 -> i3 (unMapData (i13 i1))) i1) ((\i0 -> \i0 -> i4 (\i0 -> i3 (unIData (i13 i1))) i1) (\i0 -> equalsInteger i1 0)) i1) (\i0 -> i2 (\i0 -> \i0 -> force (i5 i1 (delay True) (delay (force (i6 (i3 (i9 i1)) (delay (i2 (i10 i1)))))))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (\i0 -> \i0 -> i3 i2 i1 i4)) (force ifThenElse)) (delay False)) (force headList)) (force tailList)) (force (force sndPair))))
isZero.true (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i4 (\i0 -> i3 (unMapData (i18 i1))) i1) ((\i0 -> \i0 -> i4 (\i0 -> i3 (unIData (i18 i1))) i1) (\i0 -> equalsInteger i1 0)) i1) ((\i0 -> \i0 -> (\i0 -> i7 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1)))) (\i0 -> \i0 -> i8 (\i0 -> \i0 -> iData (subtractInteger (unIData i2) (unIData i1))) i2 i1) i2 i1) (i17 i23 i24 1) (i17 i23 i24 1))) (\i0 -> i10 (\i0 -> \i0 -> force (i13 i1 (delay True) (delay (force (i4 (i3 (i17 i1)) (delay (i2 (i18 i1)))))))))) (\i0 -> \i0 -> i12 i2 i1 i3)) (delay False)) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i22 i22)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i25 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i25 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i18 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i18) (delay ((\i0 -> i6 (i10 (i12 i2)) (i18 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c0) #736f6d65746f6b656e))
isZero.false (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i4 (\i0 -> i3 (unMapData (i13 i1))) i1) ((\i0 -> \i0 -> i4 (\i0 -> i3 (unIData (i13 i1))) i1) (\i0 -> equalsInteger i1 0)) i1) ((\i0 -> \i0 -> \i0 -> (\i0 -> i14 (bData i4) (mapData i1)) (i13 (bData i2) (iData i1))) #c0 #736f6d65746f6b656e 1)) (\i0 -> i2 (\i0 -> \i0 -> force (i5 i1 (delay True) (delay (force (i6 (i3 (i9 i1)) (delay (i2 (i10 i1)))))))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (\i0 -> \i0 -> i3 i2 i1 i4)) (force ifThenElse)) (delay False)) (force headList)) (force tailList)) (force (force sndPair))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]))
equality.itself (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i6 (\i0 -> i3 (unMapData (i22 i1))) i1) ((\i0 -> \i0 -> i6 (\i0 -> i3 (unIData (i22 i1))) i1) (\i0 -> equalsInteger i1 0)) i1) ((\i0 -> i7 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1)))) (\i0 -> \i0 -> i8 (\i0 -> \i0 -> iData (subtractInteger (unIData i2) (unIData i1))) i2 i1) i2 i1)) (\i0 -> i12 (\i0 -> \i0 -> force (i15 i1 (delay True) (delay (force (i4 (i3 (i19 i1)) (delay (i2 (i20 i1)))))))))) (\i0 -> \i0 -> i14 i2 i1 i3)) (delay False)) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i12 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i9 (\i0 -> \i0 -> force (i12 i1 (delay (\i0 -> i1 i9 i9)) (delay (i2 (i17 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i14 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i14 (mkPairData i3 i2) i4)) (i7 i1 (i18 (i19 i4)))) (i16 (i18 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay i3) (delay (i7 (i14 i1) (i2 (i15 i1)))))) i2)) (\i0 -> \i0 -> i6 (\i0 -> \i0 -> force (i9 i1 (delay i5) (delay ((\i0 -> i8 (i12 (i14 i2)) (i7 (i14 i2) i1) (\i0 -> i2) i4) (i2 (i14 i1)))))) i2)) [  ]) (force mkCons)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)))
equality.triviallyTrue (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i4 (\i0 -> i3 (unMapData (i18 i1))) i1) ((\i0 -> \i0 -> i4 (\i0 -> i3 (unIData (i18 i1))) i1) (\i0 -> equalsInteger i1 0)) i1) ((\i0 -> \i0 -> (\i0 -> i7 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1)))) (\i0 -> \i0 -> i8 (\i0 -> \i0 -> iData (subtractInteger (unIData i2) (unIData i1))) i2 i1) i2 i1) (i17 i23 i24 1) (i17 i23 i24 1))) (\i0 -> i10 (\i0 -> \i0 -> force (i13 i1 (delay True) (delay (force (i4 (i3 (i17 i1)) (delay (i2 (i18 i1)))))))))) (\i0 -> \i0 -> i12 i2 i1 i3)) (delay False)) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i22 i22)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i25 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i25 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i18 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i18) (delay ((\i0 -> i6 (i10 (i12 i2)) (i18 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c0) #736f6d65746f6b656e))
equality.triviallyFalse (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i4 (\i0 -> i3 (unMapData (i18 i1))) i1) ((\i0 -> \i0 -> i4 (\i0 -> i3 (unIData (i18 i1))) i1) (\i0 -> equalsInteger i1 0)) i1) ((\i0 -> \i0 -> (\i0 -> i7 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1)))) (\i0 -> \i0 -> i8 (\i0 -> \i0 -> iData (subtractInteger (unIData i2) (unIData i1))) i2 i1) i2 i1) (i17 i23 #736f6d65746f6b656e 1) (i17 i23 #6f74686572746f6b656e 1))) (\i0 -> i10 (\i0 -> \i0 -> force (i13 i1 (delay True) (delay (force (i4 (i3 (i17 i1)) (delay (i2 (i18 i1)))))))))) (\i0 -> \i0 -> i12 i2 i1 i3)) (delay False)) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i22 i22)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i25 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i25 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i18 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i18) (delay ((\i0 -> i6 (i10 (i12 i2)) (i18 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c0))
equality.swappedTokensTrue (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i4 (\i0 -> i3 (unMapData (i21 i1))) i1) ((\i0 -> \i0 -> i4 (\i0 -> i3 (unIData (i21 i1))) i1) (\i0 -> equalsInteger i1 0)) i1) (i4 subtractInteger (i4 addInteger (i21 i27 i28 1) (i21 i27 i20 1)) (i4 addInteger (i21 i27 i20 1) (i21 i27 i28 1)))) (\i0 -> i13 (\i0 -> \i0 -> force (i16 i1 (delay True) (delay (force (i4 (i3 (i20 i1)) (delay (i2 (i21 i1)))))))))) (\i0 -> \i0 -> i15 i2 i1 i3)) (delay False)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i23 i23)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i26 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i26 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i19 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i19) (delay ((\i0 -> i6 (i10 (i12 i2)) (i19 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #6f74686572746f6b656e) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c0) #736f6d65746f6b656e))
equality.swappedSymbolsTrue (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i4 (\i0 -> i3 (unMapData (i21 i1))) i1) ((\i0 -> \i0 -> i4 (\i0 -> i3 (unIData (i21 i1))) i1) (\i0 -> equalsInteger i1 0)) i1) (i4 subtractInteger (i4 addInteger (i21 i27 i28 1) (i21 i20 i28 1)) (i4 addInteger (i21 i20 i28 1) (i21 i27 i28 1)))) (\i0 -> i13 (\i0 -> \i0 -> force (i16 i1 (delay True) (delay (force (i4 (i3 (i20 i1)) (delay (i2 (i21 i1)))))))))) (\i0 -> \i0 -> i15 i2 i1 i3)) (delay False)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i23 i23)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i26 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i26 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i19 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i19) (delay ((\i0 -> i6 (i10 (i12 i2)) (i19 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #c7) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c0) #736f6d65746f6b656e))
equality.growing.1 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i4 (\i0 -> i3 (unMapData (i18 i1))) i1) ((\i0 -> \i0 -> i4 (\i0 -> i3 (unIData (i18 i1))) i1) (\i0 -> equalsInteger i1 0)) i1) ((\i0 -> \i0 -> (\i0 -> i7 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1)))) (\i0 -> \i0 -> i8 (\i0 -> \i0 -> iData (subtractInteger (unIData i2) (unIData i1))) i2 i1) i2 i1) (i17 i23 i24 1) (i17 i23 i24 1))) (\i0 -> i10 (\i0 -> \i0 -> force (i13 i1 (delay True) (delay (force (i4 (i3 (i17 i1)) (delay (i2 (i18 i1)))))))))) (\i0 -> \i0 -> i12 i2 i1 i3)) (delay False)) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i22 i22)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i25 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i25 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i18 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i18) (delay ((\i0 -> i6 (i10 (i12 i2)) (i18 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c0) #736f6d65746f6b656e))
equality.growing.2 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i4 (\i0 -> i3 (unMapData (i21 i1))) i1) ((\i0 -> \i0 -> i4 (\i0 -> i3 (unIData (i21 i1))) i1) (\i0 -> equalsInteger i1 0)) i1) (i4 subtractInteger (i4 addInteger (i21 i27 i20 1) (i21 i27 i28 1)) (i4 addInteger (i21 i27 i20 1) (i21 i27 i28 1)))) (\i0 -> i13 (\i0 -> \i0 -> force (i16 i1 (delay True) (delay (force (i4 (i3 (i20 i1)) (delay (i2 (i21 i1)))))))))) (\i0 -> \i0 -> i15 i2 i1 i3)) (delay False)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i23 i23)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i26 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i26 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i19 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i19) (delay ((\i0 -> i6 (i10 (i12 i2)) (i19 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #736f6d65746f6b656e) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c0) #746f6b656e))
equality.growing.3 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i4 (\i0 -> i3 (unMapData (i21 i1))) i1) ((\i0 -> \i0 -> i4 (\i0 -> i3 (unIData (i21 i1))) i1) (\i0 -> equalsInteger i1 0)) i1) (i4 subtractInteger (i4 addInteger (i4 addInteger (i22 i21 i20 1) (i22 i21 i29 1)) (i22 i28 i29 1)) (i4 addInteger (i4 addInteger (i22 i21 i20 1) (i22 i21 i29 1)) (i22 i28 i29 1)))) (\i0 -> i13 (\i0 -> \i0 -> force (i16 i1 (delay True) (delay (force (i4 (i3 (i20 i1)) (delay (i2 (i21 i1)))))))))) (\i0 -> \i0 -> i15 i2 i1 i3)) (delay False)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i24 i24)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i27 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i27 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i20 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i20) (delay ((\i0 -> i6 (i10 (i12 i2)) (i20 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #736f6d65746f6b656e) #c0) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c1) #746f6b656e))
equality.growing.4 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i4 (\i0 -> i3 (unMapData (i21 i1))) i1) ((\i0 -> \i0 -> i4 (\i0 -> i3 (unIData (i21 i1))) i1) (\i0 -> equalsInteger i1 0)) i1) (i4 subtractInteger (i4 addInteger (i4 addInteger (i4 addInteger (i23 i21 i20 1) (i23 i21 i30 1)) (i23 i22 i30 1)) (i23 i29 i30 1)) (i4 addInteger (i4 addInteger (i4 addInteger (i23 i21 i20 1) (i23 i21 i30 1)) (i23 i22 i30 1)) (i23 i29 i30 1)))) (\i0 -> i13 (\i0 -> \i0 -> force (i16 i1 (delay True) (delay (force (i4 (i3 (i20 i1)) (delay (i2 (i21 i1)))))))))) (\i0 -> \i0 -> i15 i2 i1 i3)) (delay False)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i25 i25)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i28 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i28 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i21 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i21) (delay ((\i0 -> i6 (i10 (i12 i2)) (i21 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #736f6d65746f6b656e) #c0) #c1) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c2) #746f6b656e))
equality.growing.5 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i4 (\i0 -> i3 (unMapData (i21 i1))) i1) ((\i0 -> \i0 -> i4 (\i0 -> i3 (unIData (i21 i1))) i1) (\i0 -> equalsInteger i1 0)) i1) (i4 subtractInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i24 i21 i20 1) (i24 i21 i31 1)) (i24 i22 i31 1)) (i24 i23 i31 1)) (i24 i30 i31 1)) (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i24 i21 i20 1) (i24 i21 i31 1)) (i24 i22 i31 1)) (i24 i23 i31 1)) (i24 i30 i31 1)))) (\i0 -> i13 (\i0 -> \i0 -> force (i16 i1 (delay True) (delay (force (i4 (i3 (i20 i1)) (delay (i2 (i21 i1)))))))))) (\i0 -> \i0 -> i15 i2 i1 i3)) (delay False)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i26 i26)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i29 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i29 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i22 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i22) (delay ((\i0 -> i6 (i10 (i12 i2)) (i22 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #736f6d65746f6b656e) #c0) #c1) #c2) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c3) #746f6b656e))
equality.growing.6 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i4 (\i0 -> i3 (unMapData (i21 i1))) i1) ((\i0 -> \i0 -> i4 (\i0 -> i3 (unIData (i21 i1))) i1) (\i0 -> equalsInteger i1 0)) i1) (i4 subtractInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i25 i21 i20 1) (i25 i21 i32 1)) (i25 i22 i32 1)) (i25 i23 i32 1)) (i25 i24 i32 1)) (i25 i31 i32 1)) (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i25 i21 i20 1) (i25 i21 i32 1)) (i25 i22 i32 1)) (i25 i23 i32 1)) (i25 i24 i32 1)) (i25 i31 i32 1)))) (\i0 -> i13 (\i0 -> \i0 -> force (i16 i1 (delay True) (delay (force (i4 (i3 (i20 i1)) (delay (i2 (i21 i1)))))))))) (\i0 -> \i0 -> i15 i2 i1 i3)) (delay False)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i27 i27)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i30 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i30 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i23 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i23) (delay ((\i0 -> i6 (i10 (i12 i2)) (i23 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #736f6d65746f6b656e) #c0) #c1) #c2) #c3) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c4) #746f6b656e))
equality.growing.7 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i4 (\i0 -> i3 (unMapData (i21 i1))) i1) ((\i0 -> \i0 -> i4 (\i0 -> i3 (unIData (i21 i1))) i1) (\i0 -> equalsInteger i1 0)) i1) (i4 subtractInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i26 i21 i20 1) (i26 i21 i33 1)) (i26 i22 i33 1)) (i26 i23 i33 1)) (i26 i24 i33 1)) (i26 i25 i33 1)) (i26 i32 i33 1)) (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i26 i21 i20 1) (i26 i21 i33 1)) (i26 i22 i33 1)) (i26 i23 i33 1)) (i26 i24 i33 1)) (i26 i25 i33 1)) (i26 i32 i33 1)))) (\i0 -> i13 (\i0 -> \i0 -> force (i16 i1 (delay True) (delay (force (i4 (i3 (i20 i1)) (delay (i2 (i21 i1)))))))))) (\i0 -> \i0 -> i15 i2 i1 i3)) (delay False)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i28 i28)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i31 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i31 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i24 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i24) (delay ((\i0 -> i6 (i10 (i12 i2)) (i24 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #736f6d65746f6b656e) #c0) #c1) #c2) #c3) #c4) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c5) #746f6b656e))
equality.growing.8 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i4 (\i0 -> i3 (unMapData (i21 i1))) i1) ((\i0 -> \i0 -> i4 (\i0 -> i3 (unIData (i21 i1))) i1) (\i0 -> equalsInteger i1 0)) i1) (i4 subtractInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i27 i21 i20 1) (i27 i21 i34 1)) (i27 i22 i34 1)) (i27 i23 i34 1)) (i27 i24 i34 1)) (i27 i25 i34 1)) (i27 i26 i34 1)) (i27 i33 i34 1)) (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i27 i21 i20 1) (i27 i21 i34 1)) (i27 i22 i34 1)) (i27 i23 i34 1)) (i27 i24 i34 1)) (i27 i25 i34 1)) (i27 i26 i34 1)) (i27 i33 i34 1)))) (\i0 -> i13 (\i0 -> \i0 -> force (i16 i1 (delay True) (delay (force (i4 (i3 (i20 i1)) (delay (i2 (i21 i1)))))))))) (\i0 -> \i0 -> i15 i2 i1 i3)) (delay False)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i29 i29)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i32 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i32 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i25 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i25) (delay ((\i0 -> i6 (i10 (i12 i2)) (i25 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #736f6d65746f6b656e) #c0) #c1) #c2) #c3) #c4) #c5) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c6) #746f6b656e))
equality.growing.9 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i4 (\i0 -> i3 (unMapData (i21 i1))) i1) ((\i0 -> \i0 -> i4 (\i0 -> i3 (unIData (i21 i1))) i1) (\i0 -> equalsInteger i1 0)) i1) (i4 subtractInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i28 i21 i20 1) (i28 i21 i35 1)) (i28 i22 i35 1)) (i28 i23 i35 1)) (i28 i24 i35 1)) (i28 i25 i35 1)) (i28 i26 i35 1)) (i28 i27 i35 1)) (i28 i34 i35 1)) (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i28 i21 i20 1) (i28 i21 i35 1)) (i28 i22 i35 1)) (i28 i23 i35 1)) (i28 i24 i35 1)) (i28 i25 i35 1)) (i28 i26 i35 1)) (i28 i27 i35 1)) (i28 i34 i35 1)))) (\i0 -> i13 (\i0 -> \i0 -> force (i16 i1 (delay True) (delay (force (i4 (i3 (i20 i1)) (delay (i2 (i21 i1)))))))))) (\i0 -> \i0 -> i15 i2 i1 i3)) (delay False)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i30 i30)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i33 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i33 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i26 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i26) (delay ((\i0 -> i6 (i10 (i12 i2)) (i26 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #736f6d65746f6b656e) #c0) #c1) #c2) #c3) #c4) #c5) #c6) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c7) #746f6b656e))
equality.growing.10 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i4 (\i0 -> i3 (unMapData (i21 i1))) i1) ((\i0 -> \i0 -> i4 (\i0 -> i3 (unIData (i21 i1))) i1) (\i0 -> equalsInteger i1 0)) i1) (i4 subtractInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i29 i21 i20 1) (i29 i21 i36 1)) (i29 i22 i36 1)) (i29 i23 i36 1)) (i29 i24 i36 1)) (i29 i25 i36 1)) (i29 i26 i36 1)) (i29 i27 i36 1)) (i29 i28 i36 1)) (i29 i35 i36 1)) (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i29 i21 i20 1) (i29 i21 i36 1)) (i29 i22 i36 1)) (i29 i23 i36 1)) (i29 i24 i36 1)) (i29 i25 i36 1)) (i29 i26 i36 1)) (i29 i27 i36 1)) (i29 i28 i36 1)) (i29 i35 i36 1)))) (\i0 -> i13 (\i0 -> \i0 -> force (i16 i1 (delay True) (delay (force (i4 (i3 (i20 i1)) (delay (i2 (i21 i1)))))))))) (\i0 -> \i0 -> i15 i2 i1 i3)) (delay False)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i31 i31)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i34 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i34 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i27 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i27) (delay ((\i0 -> i6 (i10 (i12 i2)) (i27 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #736f6d65746f6b656e) #c0) #c1) #c2) #c3) #c4) #c5) #c6) #c7) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c8) #746f6b656e))
equality.growing.11 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i4 (\i0 -> i3 (unMapData (i21 i1))) i1) ((\i0 -> \i0 -> i4 (\i0 -> i3 (unIData (i21 i1))) i1) (\i0 -> equalsInteger i1 0)) i1) (i4 subtractInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i30 i21 i20 1) (i30 i21 i37 1)) (i30 i22 i37 1)) (i30 i23 i37 1)) (i30 i24 i37 1)) (i30 i25 i37 1)) (i30 i26 i37 1)) (i30 i27 i37 1)) (i30 i28 i37 1)) (i30 i29 i37 1)) (i30 i36 i37 1)) (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i30 i21 i20 1) (i30 i21 i37 1)) (i30 i22 i37 1)) (i30 i23 i37 1)) (i30 i24 i37 1)) (i30 i25 i37 1)) (i30 i26 i37 1)) (i30 i27 i37 1)) (i30 i28 i37 1)) (i30 i29 i37 1)) (i30 i36 i37 1)))) (\i0 -> i13 (\i0 -> \i0 -> force (i16 i1 (delay True) (delay (force (i4 (i3 (i20 i1)) (delay (i2 (i21 i1)))))))))) (\i0 -> \i0 -> i15 i2 i1 i3)) (delay False)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i32 i32)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i35 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i35 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i28 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i28) (delay ((\i0 -> i6 (i10 (i12 i2)) (i28 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #736f6d65746f6b656e) #c0) #c1) #c2) #c3) #c4) #c5) #c6) #c7) #c8) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c9) #746f6b656e))
equality.growing.12 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i4 (\i0 -> i3 (unMapData (i21 i1))) i1) ((\i0 -> \i0 -> i4 (\i0 -> i3 (unIData (i21 i1))) i1) (\i0 -> equalsInteger i1 0)) i1) (i4 subtractInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i31 i21 i20 1) (i31 i21 i38 1)) (i31 i22 i38 1)) (i31 i23 i38 1)) (i31 i24 i38 1)) (i31 i25 i38 1)) (i31 i26 i38 1)) (i31 i27 i38 1)) (i31 i28 i38 1)) (i31 i29 i38 1)) (i31 i30 i38 1)) (i31 i37 i38 1)) (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i31 i21 i20 1) (i31 i21 i38 1)) (i31 i22 i38 1)) (i31 i23 i38 1)) (i31 i24 i38 1)) (i31 i25 i38 1)) (i31 i26 i38 1)) (i31 i27 i38 1)) (i31 i28 i38 1)) (i31 i29 i38 1)) (i31 i30 i38 1)) (i31 i37 i38 1)))) (\i0 -> i13 (\i0 -> \i0 -> force (i16 i1 (delay True) (delay (force (i4 (i3 (i20 i1)) (delay (i2 (i21 i1)))))))))) (\i0 -> \i0 -> i15 i2 i1 i3)) (delay False)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i33 i33)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i36 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i36 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i29 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i29) (delay ((\i0 -> i6 (i10 (i12 i2)) (i29 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #736f6d65746f6b656e) #c0) #c1) #c2) #c3) #c4) #c5) #c6) #c7) #c8) #c9) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #ca) #746f6b656e))
equality.growing.13 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i4 (\i0 -> i3 (unMapData (i21 i1))) i1) ((\i0 -> \i0 -> i4 (\i0 -> i3 (unIData (i21 i1))) i1) (\i0 -> equalsInteger i1 0)) i1) (i4 subtractInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i32 i21 i20 1) (i32 i21 i39 1)) (i32 i22 i39 1)) (i32 i23 i39 1)) (i32 i24 i39 1)) (i32 i25 i39 1)) (i32 i26 i39 1)) (i32 i27 i39 1)) (i32 i28 i39 1)) (i32 i29 i39 1)) (i32 i30 i39 1)) (i32 i31 i39 1)) (i32 i38 i39 1)) (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i32 i21 i20 1) (i32 i21 i39 1)) (i32 i22 i39 1)) (i32 i23 i39 1)) (i32 i24 i39 1)) (i32 i25 i39 1)) (i32 i26 i39 1)) (i32 i27 i39 1)) (i32 i28 i39 1)) (i32 i29 i39 1)) (i32 i30 i39 1)) (i32 i31 i39 1)) (i32 i38 i39 1)))) (\i0 -> i13 (\i0 -> \i0 -> force (i16 i1 (delay True) (delay (force (i4 (i3 (i20 i1)) (delay (i2 (i21 i1)))))))))) (\i0 -> \i0 -> i15 i2 i1 i3)) (delay False)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i34 i34)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i37 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i37 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i30 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i30) (delay ((\i0 -> i6 (i10 (i12 i2)) (i30 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #736f6d65746f6b656e) #c0) #c1) #c2) #c3) #c4) #c5) #c6) #c7) #c8) #c9) #ca) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #cb) #746f6b656e))
equality.growing.14 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i4 (\i0 -> i3 (unMapData (i21 i1))) i1) ((\i0 -> \i0 -> i4 (\i0 -> i3 (unIData (i21 i1))) i1) (\i0 -> equalsInteger i1 0)) i1) (i4 subtractInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i33 i21 i20 1) (i33 i21 i40 1)) (i33 i22 i40 1)) (i33 i23 i40 1)) (i33 i24 i40 1)) (i33 i25 i40 1)) (i33 i26 i40 1)) (i33 i27 i40 1)) (i33 i28 i40 1)) (i33 i29 i40 1)) (i33 i30 i40 1)) (i33 i31 i40 1)) (i33 i32 i40 1)) (i33 i39 i40 1)) (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i33 i21 i20 1) (i33 i21 i40 1)) (i33 i22 i40 1)) (i33 i23 i40 1)) (i33 i24 i40 1)) (i33 i25 i40 1)) (i33 i26 i40 1)) (i33 i27 i40 1)) (i33 i28 i40 1)) (i33 i29 i40 1)) (i33 i30 i40 1)) (i33 i31 i40 1)) (i33 i32 i40 1)) (i33 i39 i40 1)))) (\i0 -> i13 (\i0 -> \i0 -> force (i16 i1 (delay True) (delay (force (i4 (i3 (i20 i1)) (delay (i2 (i21 i1)))))))))) (\i0 -> \i0 -> i15 i2 i1 i3)) (delay False)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i35 i35)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i38 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i38 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i31 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i31) (delay ((\i0 -> i6 (i10 (i12 i2)) (i31 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #736f6d65746f6b656e) #c0) #c1) #c2) #c3) #c4) #c5) #c6) #c7) #c8) #c9) #ca) #cb) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #cc) #746f6b656e))
equality.growing.15 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i4 (\i0 -> i3 (unMapData (i21 i1))) i1) ((\i0 -> \i0 -> i4 (\i0 -> i3 (unIData (i21 i1))) i1) (\i0 -> equalsInteger i1 0)) i1) (i4 subtractInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i34 i21 i20 1) (i34 i21 i41 1)) (i34 i22 i41 1)) (i34 i23 i41 1)) (i34 i24 i41 1)) (i34 i25 i41 1)) (i34 i26 i41 1)) (i34 i27 i41 1)) (i34 i28 i41 1)) (i34 i29 i41 1)) (i34 i30 i41 1)) (i34 i31 i41 1)) (i34 i32 i41 1)) (i34 i33 i41 1)) (i34 i40 i41 1)) (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i34 i21 i20 1) (i34 i21 i41 1)) (i34 i22 i41 1)) (i34 i23 i41 1)) (i34 i24 i41 1)) (i34 i25 i41 1)) (i34 i26 i41 1)) (i34 i27 i41 1)) (i34 i28 i41 1)) (i34 i29 i41 1)) (i34 i30 i41 1)) (i34 i31 i41 1)) (i34 i32 i41 1)) (i34 i33 i41 1)) (i34 i40 i41 1)))) (\i0 -> i13 (\i0 -> \i0 -> force (i16 i1 (delay True) (delay (force (i4 (i3 (i20 i1)) (delay (i2 (i21 i1)))))))))) (\i0 -> \i0 -> i15 i2 i1 i3)) (delay False)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i36 i36)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i39 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i39 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i32 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i32) (delay ((\i0 -> i6 (i10 (i12 i2)) (i32 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #736f6d65746f6b656e) #c0) #c1) #c2) #c3) #c4) #c5) #c6) #c7) #c8) #c9) #ca) #cb) #cc) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #cd) #746f6b656e))
equality.growing.16 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i4 (\i0 -> i3 (unMapData (i21 i1))) i1) ((\i0 -> \i0 -> i4 (\i0 -> i3 (unIData (i21 i1))) i1) (\i0 -> equalsInteger i1 0)) i1) (i4 subtractInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i35 i21 i20 1) (i35 i21 i42 1)) (i35 i22 i42 1)) (i35 i23 i42 1)) (i35 i24 i42 1)) (i35 i25 i42 1)) (i35 i26 i42 1)) (i35 i27 i42 1)) (i35 i28 i42 1)) (i35 i29 i42 1)) (i35 i30 i42 1)) (i35 i31 i42 1)) (i35 i32 i42 1)) (i35 i33 i42 1)) (i35 i34 i42 1)) (i35 i41 i42 1)) (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i35 i21 i20 1) (i35 i21 i42 1)) (i35 i22 i42 1)) (i35 i23 i42 1)) (i35 i24 i42 1)) (i35 i25 i42 1)) (i35 i26 i42 1)) (i35 i27 i42 1)) (i35 i28 i42 1)) (i35 i29 i42 1)) (i35 i30 i42 1)) (i35 i31 i42 1)) (i35 i32 i42 1)) (i35 i33 i42 1)) (i35 i34 i42 1)) (i35 i41 i42 1)))) (\i0 -> i13 (\i0 -> \i0 -> force (i16 i1 (delay True) (delay (force (i4 (i3 (i20 i1)) (delay (i2 (i21 i1)))))))))) (\i0 -> \i0 -> i15 i2 i1 i3)) (delay False)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i37 i37)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i40 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i40 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i33 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i33) (delay ((\i0 -> i6 (i10 (i12 i2)) (i33 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #736f6d65746f6b656e) #c0) #c1) #c2) #c3) #c4) #c5) #c6) #c7) #c8) #c9) #ca) #cb) #cc) #cd) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #ce) #746f6b656e))
equality.growing.17 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i4 (\i0 -> i3 (unMapData (i21 i1))) i1) ((\i0 -> \i0 -> i4 (\i0 -> i3 (unIData (i21 i1))) i1) (\i0 -> equalsInteger i1 0)) i1) (i4 subtractInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i36 i21 i20 1) (i36 i21 i43 1)) (i36 i22 i43 1)) (i36 i23 i43 1)) (i36 i24 i43 1)) (i36 i25 i43 1)) (i36 i26 i43 1)) (i36 i27 i43 1)) (i36 i28 i43 1)) (i36 i29 i43 1)) (i36 i30 i43 1)) (i36 i31 i43 1)) (i36 i32 i43 1)) (i36 i33 i43 1)) (i36 i34 i43 1)) (i36 i35 i43 1)) (i36 i42 i43 1)) (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i4 addInteger (i36 i21 i20 1) (i36 i21 i43 1)) (i36 i22 i43 1)) (i36 i23 i43 1)) (i36 i24 i43 1)) (i36 i25 i43 1)) (i36 i26 i43 1)) (i36 i27 i43 1)) (i36 i28 i43 1)) (i36 i29 i43 1)) (i36 i30 i43 1)) (i36 i31 i43 1)) (i36 i32 i43 1)) (i36 i33 i43 1)) (i36 i34 i43 1)) (i36 i35 i43 1)) (i36 i42 i43 1)))) (\i0 -> i13 (\i0 -> \i0 -> force (i16 i1 (delay True) (delay (force (i4 (i3 (i20 i1)) (delay (i2 (i21 i1)))))))))) (\i0 -> \i0 -> i15 i2 i1 i3)) (delay False)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> (\i0 -> i5 i1 i3 (\i0 -> \i0 -> i9 i1 (i9 i2 (i10 i4 i1)))) (\i0 -> \i0 -> i10 i2 (\i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> \i0 -> i1 (i8 i4 i3)) i3))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i10 i1 (delay (\i0 -> i1 i38 i38)) (delay (i2 (i15 i1) (\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> i1 (i41 (mkPairData i3 i2) i5) i4) (\i0 -> \i0 -> i1 i5 (i41 (mkPairData i3 i2) i4)) (i7 i1 (i16 (i17 i4)))) (i14 (i16 i3))))))) i1 (\i0 -> \i0 -> \i0 -> i1 i3 i2))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> i4 i1) (\i0 -> i3 i1))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i3) (delay (i34 (i12 i1) (i2 (i13 i1)))))) i2)) (\i0 -> \i0 -> i4 (\i0 -> \i0 -> force (i7 i1 (delay i34) (delay ((\i0 -> i6 (i10 (i12 i2)) (i34 (i12 i2) i1) (\i0 -> i2) i4) (i2 (i12 i1)))))) i2)) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) #736f6d65746f6b656e) #c0) #c1) #c2) #c3) #c4) #c5) #c6) #c7) #c8) #c9) #ca) #cb) #cc) #cd) #ce) (\i0 -> \i0 -> \i0 -> i4 i3 (i5 i2 i1))) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #cf) #746f6b656e))